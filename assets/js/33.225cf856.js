(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{297:function(t,r,a){"use strict";a.r(r);var e=a(10),u=Object(e.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"future-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#future-模式"}},[t._v("#")]),t._v(" Future 模式")]),t._v(" "),r("p",[t._v("Future模式是多线程开发中的一种常见的设计模式，核心思想"),r("strong",[t._v("异步调用")]),t._v("，让串行化的问题变得并行处理节省时间。")]),t._v(" "),r("p",[t._v("对于Future模式来说，它无法立即返回你需要的数据，但是它会返回一个契约，将来你可以凭借这个契约去获取需要的信息。")]),t._v(" "),r("h2",{attrs:{id:"future-模式的主要角色"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#future-模式的主要角色"}},[t._v("#")]),t._v(" Future 模式的主要角色")]),t._v(" "),r("h2",{attrs:{id:"future-模式的简单实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#future-模式的简单实现"}},[t._v("#")]),t._v(" Future 模式的简单实现")]),t._v(" "),r("h2",{attrs:{id:"java的future接口及其实现类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java的future接口及其实现类"}},[t._v("#")]),t._v(" Java的Future接口及其实现类")]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/concurrent/Java%E7%9A%84Future%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E7%B1%BB.jpg",alt:"Java的Future接口及其实现类.jpg"}})]),t._v(" "),r("h2",{attrs:{id:"future-不足之处"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#future-不足之处"}},[t._v("#")]),t._v(" Future 不足之处")]),t._v(" "),r("h2",{attrs:{id:"参考文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/nanhuaibeian/article/details/117307063",target:"_blank",rel:"noopener noreferrer"}},[t._v("学习多线程中的 Future 模式"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=u.exports}}]);