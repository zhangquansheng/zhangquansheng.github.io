(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{317:function(t,r,e){"use strict";e.r(r);var n=e(10),a=Object(n.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"中介者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[t._v("#")]),t._v(" 中介者模式")]),t._v(" "),r("p",[t._v("中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。")]),t._v(" "),r("p",[t._v("它的主要意图是用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。")]),t._v(" "),r("p",[t._v("实际开发中，消息中间件"),r("code",[t._v("MQ")]),t._v("就是一个中介者模式。")]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("参考文档")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.runoob.com/design-pattern/mediator-pattern.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("中介者模式|菜鸟教程"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=a.exports}}]);