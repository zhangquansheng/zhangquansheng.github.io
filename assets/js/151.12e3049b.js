(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{424:function(v,_,t){"use strict";t.r(_);var o=t(10),e=Object(o.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[v._v("#")]),v._v(" 锁")]),v._v(" "),_("h2",{attrs:{id:"innodb存储引擎中的锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#innodb存储引擎中的锁"}},[v._v("#")]),v._v(" Innodb存储引擎中的锁")]),v._v(" "),_("h3",{attrs:{id:"锁的类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#锁的类型"}},[v._v("#")]),v._v(" 锁的类型")]),v._v(" "),_("p",[_("code",[v._v("Innodb")]),v._v("存储引擎实现了如下两种标准的行级锁：")]),v._v(" "),_("ul",[_("li",[v._v("共享锁("),_("code",[v._v("S Lock")]),v._v(")，允许事务读取一行数据，又称为读锁")]),v._v(" "),_("li",[_("strong",[v._v("排它锁("),_("code",[v._v("X Lock")]),v._v(")，允许事务删除或者更新一行数据，又称为写锁、独占锁")]),v._v("。")])]),v._v(" "),_("p",[v._v("共享锁和排他锁的兼容性：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("-")]),v._v(" "),_("th",[v._v("S")]),v._v(" "),_("th",[v._v("X")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("S")]),v._v(" "),_("td",[v._v("兼容")]),v._v(" "),_("td",[v._v("不兼容")])]),v._v(" "),_("tr",[_("td",[v._v("X")]),v._v(" "),_("td",[v._v("不兼容")]),v._v(" "),_("td",[v._v("不兼容")])])])]),v._v(" "),_("p",[v._v("从表中可以发现"),_("code",[v._v("X锁")]),v._v("与任何的锁都不兼容，而"),_("code",[v._v("S锁")]),v._v("仅和"),_("code",[v._v("S锁")]),v._v("兼容。需要特别注意的是，"),_("code",[v._v("S锁")]),v._v("和"),_("code",[v._v("X锁")]),v._v("都是"),_("strong",[v._v("行锁")]),v._v("，兼容是指对同一记录（row）锁的兼容性情况。")]),v._v(" "),_("p",[v._v("此外，"),_("code",[v._v("Innodb")]),v._v("存储引擎支持多粒度（granular）锁定，这种锁定允许事务在行级上的锁和表级上的锁同时存在。为了支持在不同粒度上进行加锁操作，"),_("code",[v._v("Innodb")]),v._v("存储引擎支持一种额外的锁方式，称之为意向锁（Intention Lock）。")]),v._v(" "),_("p",[_("code",[v._v("Innodb")]),v._v("存储引擎支持意向锁设计比较简练，其意向锁即为表级别的锁。设计目的主要是为了在一个事务中揭示下一行（数据库->表->页->行记录）将被请求的锁类型。其支持两种意向锁：")]),v._v(" "),_("ul",[_("li",[v._v("意向共享锁(IS Lock)，事务想要获得一张表中某几行的共享锁")]),v._v(" "),_("li",[v._v("意向排他锁(IX Lock)，事务想要获得一张表中某几行的排他锁")])]),v._v(" "),_("p",[v._v("由于"),_("code",[v._v("Innodb")]),v._v("存储引擎支持的是行级别的锁，因此意向锁不会阻塞除全表扫描以后的任何请求。故"),_("strong",[v._v("表级意向锁")]),v._v("与"),_("strong",[v._v("行级锁")]),v._v("的兼容性如下表：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("-")]),v._v(" "),_("th",[v._v("IS")]),v._v(" "),_("th",[v._v("IX")]),v._v(" "),_("th",[v._v("S")]),v._v(" "),_("th",[v._v("X")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("IS")]),v._v(" "),_("td",[v._v("兼容")]),v._v(" "),_("td",[v._v("兼容")]),v._v(" "),_("td",[v._v("兼容")]),v._v(" "),_("td",[v._v("不兼容")])]),v._v(" "),_("tr",[_("td",[v._v("IX")]),v._v(" "),_("td",[v._v("兼容")]),v._v(" "),_("td",[v._v("兼容")]),v._v(" "),_("td",[v._v("不兼容")]),v._v(" "),_("td",[v._v("不兼容")])]),v._v(" "),_("tr",[_("td",[v._v("S")]),v._v(" "),_("td",[v._v("兼容")]),v._v(" "),_("td",[v._v("不兼容")]),v._v(" "),_("td",[v._v("兼容")]),v._v(" "),_("td",[v._v("不兼容")])]),v._v(" "),_("tr",[_("td",[v._v("X")]),v._v(" "),_("td",[v._v("不兼容")]),v._v(" "),_("td",[v._v("不兼容")]),v._v(" "),_("td",[v._v("不兼容")]),v._v(" "),_("td",[v._v("不兼容")])])])]),v._v(" "),_("h3",{attrs:{id:"一致性非锁定读"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一致性非锁定读"}},[v._v("#")]),v._v(" 一致性非锁定读")]),v._v(" "),_("p",[v._v("一致性非锁定读(consistent nonlocking read)是指"),_("code",[v._v("Innodb")]),v._v("存储引擎通过多版本控制(multi versioning)的方式来读取当前执行时间数据库中行的数据，如果读取的行正在执行DELETE或UPDATE操作，这时读取操作不会因此等待行上锁的释放。相反的，"),_("code",[v._v("Innodb")]),v._v("会去读取行的一个快照数据\n"),_("img",{attrs:{src:"/img/mysql/c-nl-read.jpg",alt:"Innodb存储引擎的一致性的非锁定读"}})]),v._v(" "),_("p",[v._v("上面展示了"),_("code",[v._v("Innodb")]),v._v("存储引擎一致性非锁定读。之所以称为"),_("strong",[v._v("非锁定读")]),v._v("，因为不需要等待访问的行上"),_("code",[v._v("X锁")]),v._v("的释放。快照数据是指该行之前版本的数据，该实现是通过"),_("code",[v._v("undo")]),v._v("段来完成。而"),_("code",[v._v("undo")]),v._v("用来事务中的回滚数据，因此快照数据本身没有额外的开销，此外，读取快照数据不需要上锁，因为没有事务需要对历史数据进行修改操作。")]),v._v(" "),_("p",[v._v("可以看到，非锁定读机制极大地提高了数据库的并发性，在"),_("code",[v._v("Innodb")]),v._v("存储引擎的默认设置下，这是默认的读写方式，即读不会占用和等待表上的锁。但是在不同的事务隔离级别下，读取的方式不同，并不是每个事务隔离级别下都是采用非锁定的一致性读，此外，即使使用非锁定的一致性读，但是对于快照数据的定义也各不相同。")]),v._v(" "),_("p",[v._v("快照其实是当前行数据之前的历史版本，每行记录可能有多个版本，如图显示，一个行记录可能有不止一个快照数据，一般称这种技术为多版本技术，由此带来的并发控制，称为多版本并发控制(Multi Version Concurrency Control,"),_("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("MVCC"),_("OutboundLink")],1),v._v(")")]),v._v(" "),_("p",[v._v("在事务隔离级别"),_("strong",[v._v("RC")]),v._v("和"),_("strong",[v._v("RR")]),v._v("下，"),_("code",[v._v("Innodb")]),v._v("存储引擎使用非锁定的一致性读。然而，对于快照数据的定义却不相同。在"),_("strong",[v._v("RC")]),v._v("事务隔离级别下，对于快照数据，非一致性读总是读取被锁定行的最新一份快照数据。而在"),_("strong",[v._v("RR")]),v._v("事务隔离级别下，对于快照数据，非一致性读总是读取事务开始时的行数据版本。")]),v._v(" "),_("h3",{attrs:{id:"一致性读定锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一致性读定锁"}},[v._v("#")]),v._v(" 一致性读定锁")]),v._v(" "),_("p",[v._v("某些情况下，用户需要显式地对数据库读取操作进行加锁以保证数据逻辑的一致性。而这就要求数据库支持加锁语句，即使是对于"),_("strong",[v._v("SELECT")]),v._v("的只读操作，"),_("code",[v._v("Innodb")]),v._v("存储引擎对于"),_("strong",[v._v("SELECT")]),v._v("语句支持两种一致性的锁定读(locking read)操作：")]),v._v(" "),_("ul",[_("li",[v._v("SELECT...FOR UPDATE         (X锁)")]),v._v(" "),_("li",[v._v("SELECT...LOCK IN SHARE MODE (S锁)")])]),v._v(" "),_("p",[_("code",[v._v("SELECT...FOR UPDATE")]),v._v("对读取的行记录加上一个"),_("code",[v._v("X锁")]),v._v("，其他事务不能对已锁定的行加上任务锁。"),_("code",[v._v("SELECT...LOCK IN SHARE MODE")]),v._v("对读取的行记录加上一个"),_("code",[v._v("S锁")]),v._v("，其他事务可以向被锁定的行加"),_("code",[v._v("S锁")]),v._v("，但是如果加"),_("code",[v._v("X锁")]),v._v("，则会被阻塞。")]),v._v(" "),_("p",[v._v("对于一致性非锁定读，即使读取的行已被执行了"),_("code",[v._v("SELECT...FOR UPDATE")]),v._v("，也是可以进行读取的，这是因为"),_("strong",[v._v("MVCC")]),v._v("。此外，"),_("code",[v._v("SELECT...FOR UPDATE")]),v._v("，"),_("code",[v._v("SELECT...LOCK IN SHARE MODE")]),v._v("必须在一个事务中，当事务提交了，锁也就释放了。因此在使用上诉两句"),_("strong",[v._v("SELECT")]),v._v("锁定语句时，务必加上"),_("strong",[v._v("BEGIN")]),v._v(","),_("strong",[v._v("START TRANSACTION")]),v._v("或者"),_("strong",[v._v("SET AUTOCOMMIT=0")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"锁的算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#锁的算法"}},[v._v("#")]),v._v(" 锁的算法")]),v._v(" "),_("p",[_("code",[v._v("Innodb")]),v._v("存储引擎行锁有3中算法，其分别是：")]),v._v(" "),_("ul",[_("li",[v._v("Record Lock: 单个行记录上的锁")]),v._v(" "),_("li",[v._v("Gap Lock: 间隙锁，锁定一个范围，但不包括记录本身")]),v._v(" "),_("li",[v._v("Next-Key Lock : Gap Lock+Record Lock ，锁定一个范围，并且锁定记录本身")])]),v._v(" "),_("p",[v._v("用户可以通过以下两种方式来显式地关闭"),_("strong",[v._v("间隙锁（Gap Lock）")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("将事务的隔离级别设置为"),_("strong",[v._v("READ COMMITTED")])]),v._v(" "),_("li",[v._v("将参数"),_("code",[v._v("innodb_locks_unsafe_for_binlog")]),v._v("设置为1")])]),v._v(" "),_("p",[v._v("在上述的配置下，除了外键约束和唯一性检查依然需要"),_("code",[v._v("Gap Lock")]),v._v("，其余情况仅使用"),_("code",[v._v("Record Lock")]),v._v("进行锁定。但需要注意的是，上述设置破坏了事务的隔离性，并且对于"),_("code",[v._v("replication")]),v._v("可能会导致主从数据的不一致。此外，从性能上来看， "),_("strong",[v._v("READ COMMITTED")]),v._v("也不会优于默认的事务隔离级别"),_("strong",[v._v("READ REPEATABLE")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"解决-phantom-problem-幻读"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解决-phantom-problem-幻读"}},[v._v("#")]),v._v(" 解决 Phantom Problem（幻读）")]),v._v(" "),_("p",[v._v("在默认的事务隔离级别下，即"),_("strong",[v._v("READ REPEATABLE")]),v._v("下，"),_("code",[v._v("Innodb")]),v._v("存储引擎采用"),_("code",[v._v("Next-Key Locking")]),v._v("机制来避免"),_("strong",[v._v("实时读")]),v._v("情况下的"),_("code",[v._v("Phantom Problem")]),v._v("（幻读）。"),_("code",[v._v("Phantom Problem")]),v._v("是指"),_("strong",[v._v("在同一事务下，连续执行两次同样的SQL语句，可能导致不同的结果，第二次的SQL语句可能会返回之前不存在的行。")])]),v._v(" "),_("h2",{attrs:{id:"死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[v._v("#")]),v._v(" 死锁")]),v._v(" "),_("p",[v._v("死锁是"),_("strong",[v._v("指两个或两个以上的事务在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("Innodb")]),v._v("存储引擎采用"),_("code",[v._v("wait-for graph(等待图)")]),v._v("的方式来进行死锁检测。")]),v._v(" "),_("h2",{attrs:{id:"锁升级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#锁升级"}},[v._v("#")]),v._v(" 锁升级")]),v._v(" "),_("p",[v._v("锁升级是指将当前锁的粒度降低。举例来说，数据库可以把一个表的 1000个行锁升级为一个页锁，或者将页锁升级为表锁。如果在数据库的设计中认为锁时一种稀有的资源，而且想避免锁的开销，那数据库中会频繁出现锁升级现象。")]),v._v(" "),_("p",[_("code",[v._v("Innodb")]),v._v("存储引擎"),_("strong",[v._v("不存在锁升级的问题")]),v._v("。因为其不是根据每个记录来产生行锁的，相反，其根据每个事务访问的每个页对锁进行管理的，采用的是位图的方式。因此不管一个事务锁住页中一个记录还是多个记录，其开销通常都是一致的。")]),v._v(" "),_("h2",{attrs:{id:"mysql-innodb下-update的并发是否会产生脏数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql-innodb下-update的并发是否会产生脏数据"}},[v._v("#")]),v._v(" MYSQL-Innodb下，update的并发是否会产生脏数据？")]),v._v(" "),_("h3",{attrs:{id:"问题描述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[v._v("#")]),v._v(" 问题描述")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("语句1：update A set number=number+ 5 where id=1;\n语句2：update A set number=number+ 7 where id=1;\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("p",[v._v("假设这两条SQL语句同时被mysql执行，id=1的记录中number字段的原始值为 10，那么是否有可能出现这种情况：")]),v._v(" "),_("p",[v._v("语句1和2因为同时执行，他们得到的number的值都是10，都是在10的基础上分别加5和7，导致最终number被更新为15或17，而不是22？")]),v._v(" "),_("h3",{attrs:{id:"正解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正解"}},[v._v("#")]),v._v(" 正解")]),v._v(" "),_("p",[v._v("不会，并发执行时第一个"),_("code",[v._v("update")]),v._v("会持有"),_("code",[v._v("id=1")]),v._v("这行记录的"),_("strong",[v._v("排它锁（X锁）")]),v._v("，第二个"),_("code",[v._v("update")]),v._v("需要持有这个记录的"),_("strong",[v._v("排它锁")]),v._v("的才能对他进行修改，\n正常的话，第二个"),_("code",[v._v("update")]),v._v("会"),_("strong",[v._v("阻塞")]),v._v("，直到第一个"),_("code",[v._v("update")]),v._v("提交成功，他才会获得这个"),_("strong",[v._v("排它锁")]),v._v("，从而对数据进行修改。")]),v._v(" "),_("h2",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),_("p",[v._v("学习数据库锁时，在锁的分类中，不同分类方式锁所表示的含义是不一样的，不能混淆，比如，不能将行锁与共享锁做比较，不然会陷入死胡同，这是两种不同的概念。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("锁的分类")]),v._v(" "),_("th",[v._v("相关的锁")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("锁模式分类")]),v._v(" "),_("td",[v._v("乐观锁、悲观锁")])]),v._v(" "),_("tr",[_("td",[v._v("范围锁")]),v._v(" "),_("td",[v._v("行锁、表锁")])]),v._v(" "),_("tr",[_("td",[v._v("属性锁")]),v._v(" "),_("td",[v._v("共享锁(S)、排他锁(X)")])]),v._v(" "),_("tr",[_("td",[v._v("状态锁")]),v._v(" "),_("td",[v._v("意向共享锁(IS)、意向排他锁(IX)")])]),v._v(" "),_("tr",[_("td",[v._v("算法锁")]),v._v(" "),_("td",[v._v("记录锁、间隙锁、Next-Key Lock")])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);