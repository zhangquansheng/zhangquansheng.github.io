(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{296:function(t,v,_){"use strict";_.r(v);var s=_(10),l=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"架构设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构设计"}},[t._v("#")]),t._v(" 架构设计")]),t._v(" "),v("p",[t._v("架构设计的本质是『不确定性』")]),t._v(" "),v("p",[t._v("架构思路一般是: 问题(背景)--》技术调研(选型) --》规划(方案) --》 落地")]),t._v(" "),v("h2",{attrs:{id:"架构设计的一般原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构设计的一般原则"}},[t._v("#")]),t._v(" 架构设计的一般原则")]),t._v(" "),v("ol",[v("li",[t._v("合适原则\n"),v("ul",[v("li",[t._v("按照实际场景选择合适的系统架构")]),t._v(" "),v("li",[t._v("需要和当前业务规模以及未来1-2年的发展规划相匹配")])])]),t._v(" "),v("li",[t._v("简单原则\n"),v("ul",[v("li",[t._v("Keep Simple and Stupid 、大道至简")]),t._v(" "),v("li",[t._v("一个复杂的问题是由多个简单问题构成的，难的是如何拆解它，将它拆解为多个问题，逐个解决")])])]),t._v(" "),v("li",[t._v("演化原则\n"),v("ul",[v("li",[t._v("优秀的架构一定是以业务不断发展而不断演化而来")]),t._v(" "),v("li",[t._v("架构设计要满足当时业务需要，而且具有可扩展性和持续开发能力，能够应变后续架构升级和调整")])])])]),t._v(" "),v("h2",{attrs:{id:"常见架构设计的思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见架构设计的思想"}},[t._v("#")]),t._v(" 常见架构设计的思想")]),t._v(" "),v("ul",[v("li",[t._v("烟囱式架构：系统完全不和外界交互，自己能把能力实现即可，所以又被称为信息孤岛")]),t._v(" "),v("li",[v("strong",[t._v("分层架构")])]),t._v(" "),v("li",[v("strong",[t._v("微服务架构")])]),t._v(" "),v("li",[v("strong",[t._v("DDD")])]),t._v(" "),v("li",[t._v("SOA：面向服务架构")])]),t._v(" "),v("h2",{attrs:{id:"定理-原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定理-原则"}},[t._v("#")]),t._v(" 定理&原则")]),t._v(" "),v("ul",[v("li",[t._v("面向对象原则："),v("strong",[t._v("SOLID")])]),t._v(" "),v("li",[t._v("分布式系统："),v("strong",[t._v("CAP理论")]),t._v("、"),v("strong",[t._v("BASE理论")])])])])}),[],!1,null,null,null);v.default=l.exports}}]);