(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{313:function(v,l,_){"use strict";_.r(l);var t=_(10),a=Object(t.a)({},(function(){var v=this,l=v._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"责任链模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式"}},[v._v("#")]),v._v(" 责任链模式")]),v._v(" "),l("p",[v._v("责任链模式（"),l("code",[v._v("Chain of Responsibility Pattern")]),v._v("）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。")]),v._v(" "),l("p",[v._v("它的主要意图是避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。")]),v._v(" "),l("p",[v._v("优点：")]),v._v(" "),l("ul",[l("li",[v._v("1、降低耦合度。它将请求的发送者和接收者解耦。")]),v._v(" "),l("li",[v._v("2、简化了对象。使得对象不需要知道链的结构。")]),v._v(" "),l("li",[v._v("3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。")]),v._v(" "),l("li",[v._v("4、增加新的请求处理类很方便。")])]),v._v(" "),l("p",[v._v("缺点：")]),v._v(" "),l("ul",[l("li",[v._v("1、不能保证请求一定被接收。")]),v._v(" "),l("li",[v._v("2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。")]),v._v(" "),l("li",[v._v("3、可能不容易观察运行时的特征，有碍于除错。")])]),v._v(" "),l("p",[v._v("使用场景：")]),v._v(" "),l("ul",[l("li",[v._v("1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。")]),v._v(" "),l("li",[v._v("2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。")]),v._v(" "),l("li",[v._v("3、可动态指定一组对象处理请求。")])]),v._v(" "),l("h2",{attrs:{id:"real-world-examples"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#real-world-examples"}},[v._v("#")]),v._v(" Real world examples")]),v._v(" "),l("ul",[l("li",[v._v("java.util.logging.Logger#log()")]),v._v(" "),l("li",[v._v("Apache Commons Chain")]),v._v(" "),l("li",[v._v("javax.servlet.Filter#doFilter()")])])])}),[],!1,null,null,null);l.default=a.exports}}]);