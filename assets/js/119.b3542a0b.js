(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{383:function(a,t,v){"use strict";v.r(t);var r=v(10),s=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),t("h2",{attrs:{id:"内存模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存模型"}},[a._v("#")]),a._v(" 内存模型")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/java/jmm.png",alt:"jmm"}})]),a._v(" "),t("p",[t("strong",[a._v("JDK 8 版本之后 PermGen(永久) 已被 Metaspace(元空间) 取代，元空间使用的是直接内存")])]),a._v(" "),t("h3",{attrs:{id:"jdk-8-版本之后-为什么要将永久代-permgen-替换为元空间-metaspace-呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-8-版本之后-为什么要将永久代-permgen-替换为元空间-metaspace-呢"}},[a._v("#")]),a._v(" JDK 8 版本之后，为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?")]),a._v(" "),t("ol",[t("li",[a._v("元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 MaxPermSize 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。")]),a._v(" "),t("li",[a._v("整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。")])]),a._v(" "),t("h3",{attrs:{id:"jdk-1-7为什么要将字符串常量池移动到堆中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-1-7为什么要将字符串常量池移动到堆中"}},[a._v("#")]),a._v(" JDK 1.7为什么要将字符串常量池移动到堆中")]),a._v(" "),t("p",[a._v("因为永久代（方法区实现）的 "),t("strong",[a._v("GC")]),a._v(" 回收效率太低，只有在整堆收集 (Full GC)的时候才会被执行 GC。Java 程序中通常会有大量的被创建的字符串等待回收，将字符串常量池放到堆中，能够更高效及时地回收字符串内存。")]),a._v(" "),t("h2",{attrs:{id:"程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),t("blockquote",[t("p",[a._v("程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。")])]),a._v(" "),t("p",[a._v("程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。")]),a._v(" "),t("p",[a._v("另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。")]),a._v(" "),t("h2",{attrs:{id:"java-虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-虚拟机栈"}},[a._v("#")]),a._v(" Java 虚拟机栈")]),a._v(" "),t("p",[a._v("与程序计数器一样，Java 虚拟机栈（后文简称栈）也是线程私有的，它的生命周期和线程相同，随着线程的创建而创建，随着线程的死亡而死亡。")]),a._v(" "),t("p",[a._v("栈由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法返回地址。")]),a._v(" "),t("h2",{attrs:{id:"本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[a._v("#")]),a._v(" 本地方法栈")]),a._v(" "),t("p",[a._v("和虚拟机栈所发挥的作用非常相似，区别是： 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。")]),a._v(" "),t("h2",{attrs:{id:"堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),t("p",[a._v("Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，"),t("strong",[a._v("几乎所有的对象实例以及数组都在这里分配内存")]),a._v("。")]),a._v(" "),t("p",[a._v("Java 堆是垃圾收集器管理的主要区域，因此也被称作 GC 堆（Garbage Collected Heap）。从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代；再细致一点有：Eden、Survivor、Old 等空间。进一步划分的目的是更好地回收内存，或者更快地分配内存。")]),a._v(" "),t("h2",{attrs:{id:"方法区-jdk-1-7-元空间-jdk-1-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区-jdk-1-7-元空间-jdk-1-8"}},[a._v("#")]),a._v(" 方法区（JDK 1.7） & 元空间 (JDK 1.8)")]),a._v(" "),t("p",[a._v("方法区会存储已被虚拟机加载的 类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据。")]),a._v(" "),t("h2",{attrs:{id:"运行时常量池-方法区的一部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池-方法区的一部分"}},[a._v("#")]),a._v(" 运行时常量池 （方法区的一部分）")]),a._v(" "),t("p",[a._v("Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量（Literal）和符号引用（Symbolic Reference）的 常量池表(Constant Pool Table) 。")]),a._v(" "),t("p",[t("strong",[a._v("字符串常量池")]),a._v("：JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。")]),a._v(" "),t("p",[a._v("JDK1.7 之前，字符串常量池存放在永久代。JDK1.7 字符串常量池和静态变量从永久代移动了 Java 堆中。")]),a._v(" "),t("h3",{attrs:{id:"jdk-1-7-为什么要将字符串常量池移动到堆中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-1-7-为什么要将字符串常量池移动到堆中"}},[a._v("#")]),a._v(" JDK 1.7 为什么要将字符串常量池移动到堆中？")]),a._v(" "),t("p",[a._v("主要是因为永久代（方法区实现）的 GC 回收效率太低，只有在整堆收集 (Full GC)的时候才会被执行 GC。Java 程序中通常会有大量的被创建的字符串等待回收，将字符串常量池放到堆中，能够更高效及时地回收字符串内存。")]),a._v(" "),t("h2",{attrs:{id:"直接内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接内存"}},[a._v("#")]),a._v(" 直接内存")]),a._v(" "),t("p",[a._v("直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。")])])}),[],!1,null,null,null);t.default=s.exports}}]);