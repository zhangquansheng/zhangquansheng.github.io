(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{320:function(t,r,e){"use strict";e.r(r);var n=e(10),s=Object(n.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"代理模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[t._v("#")]),t._v(" 代理模式")]),t._v(" "),r("p",[t._v("代理模式（"),r("code",[t._v("Proxy Pattern")]),t._v("）就是让一个类代表另一个类的功能，它属于"),r("strong",[t._v("结构型模式")]),t._v("。")]),t._v(" "),r("p",[t._v("它的主要意图是为其他对象提供一种代理"),r("strong",[t._v("以控制对这个对象的访问")]),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"spring-框架应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-框架应用"}},[t._v("#")]),t._v(" Spring 框架应用")]),t._v(" "),r("p",[r("code",[t._v("Spring")]),t._v(" "),r("code",[t._v("AOP")]),t._v("功能的实现就是代理模式。")]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("参考文档")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/design-patterns/proxy"}},[t._v("动态代理")])]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.runoob.com/design-pattern/proxy-pattern.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("代理模式|菜鸟教程"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=s.exports}}]);