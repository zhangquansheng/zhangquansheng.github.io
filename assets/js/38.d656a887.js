(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{309:function(s,n,t){"use strict";t.r(n);var a=t(10),e=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"synchronized-底层实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-底层实现"}},[s._v("#")]),s._v(" synchronized 底层实现")]),s._v(" "),n("p",[n("code",[s._v("Java")]),s._v("语言的关键字，可用来给"),n("strong",[s._v("对象")]),s._v("和"),n("strong",[s._v("方法")]),s._v("或者"),n("strong",[s._v("代码块")]),s._v("加锁，当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个线程执行这段代码。")]),s._v(" "),n("h2",{attrs:{id:"锁升级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#锁升级"}},[s._v("#")]),s._v(" 锁升级")]),s._v(" "),n("blockquote",[n("p",[s._v("synchronized锁升级过程总结：一句话，就是"),n("strong",[s._v("先自旋，不行再阻塞")]),s._v("。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/img/concurrent/synchronized.png",alt:"synchronized"}})]),s._v(" "),n("ol",[n("li",[s._v("获取当前线程锁的状态，如果无锁，则通过CAS修改线程ID执行自己，升级为偏向锁后，执行同步代码块")]),s._v(" "),n("li",[s._v("如果是偏向锁，则判断当前对象头的mark word 中的指向的线程ID是否是自己，如果是则获取到偏向锁（当前线程），执行同步代码块")]),s._v(" "),n("li",[s._v("如果不是自己（获取偏向锁失败），则升级成轻量级锁：\n"),n("ul",[n("li",[s._v("原持有偏向锁的线程执行到安全点撤销偏向锁")]),s._v(" "),n("li",[s._v("当前线程栈中分配锁记录，并拷贝mark word 到锁记录中")]),s._v(" "),n("li",[s._v("CAS 去修改mark word 中的指针指向自己（自旋）")])])]),s._v(" "),n("li",[s._v("成功升级成轻量级锁后，执行同步代码块并释放锁，如果当前mark word中的指针没有指向自己，则唤起挂起的线程，开启新一轮的锁竞争")]),s._v(" "),n("li",[s._v("自旋一定次数后，依然获取轻量级锁失败以后，升级为重量级锁，阻塞挂起当前线程")])]),s._v(" "),n("h2",{attrs:{id:"修饰范围"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰范围"}},[s._v("#")]),s._v(" 修饰范围")]),s._v(" "),n("p",[n("img",{attrs:{src:"/img/concurrent/synchronized.webp",alt:"synchronized"}})]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedTest")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//静态方法，锁住的是类对象(SynchronizedTest.class)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("staticMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//实例方法，锁住的是类的实例对象(this)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("methodClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//同步代码块，锁住的是类对象(SynchronizedTest.class)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedTest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("methodThis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//同步代码块，锁住的是类的实例对象(this)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedTest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("methodObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//同步代码块，锁住的是配置的实例对象")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("ol",[n("li",[s._v("当修饰静态方法时，"),n("code",[s._v("synchronized")]),s._v("锁定的是整个class对象，即不同线程操作该类的不同实例对象时，只要被"),n("code",[s._v("synchronized")]),s._v("修饰的代码都无法同步访问。")]),s._v(" "),n("li",[s._v("当修饰普通方法时，"),n("code",[s._v("synchronized")]),s._v("锁定的是具体的一个实例对象，即该类的不同实例对象之间的锁是隔离的，当多个线程操作的实例对象不一样的，可以同时访问相同的被"),n("code",[s._v("synchronized")]),s._v("修饰的方法。")]),s._v(" "),n("li",[s._v("当修饰代码块时，锁的粒度取决于"),n("code",[s._v("()")]),s._v("里面指定的对象，当"),n("code",[s._v("synchronized(SynchronizedTest.class)")]),s._v("时，是和"),n("code",[s._v("1")]),s._v("一样的类锁，当"),n("code",[s._v("synchronized (SynchronizedTest.this)")]),s._v("时，是和"),n("code",[s._v("2")]),s._v("一样的实例对象锁。")]),s._v(" "),n("li",[s._v("代码中没有被"),n("code",[s._v("synchronized")]),s._v("修饰的其他方法是不受上诉各种锁的影响的。")])]),s._v(" "),n("p",[n("strong",[s._v("构造方法不能使用"),n("code",[s._v("synchronized")]),s._v("关键字修饰，构造方法本身就属于线程安全的，不存在同步的构造方法一说。")])]),s._v(" "),n("h2",{attrs:{id:"实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[s._v("#")]),s._v(" 实现原理")]),s._v(" "),n("p",[s._v("关键字："),n("code",[s._v("锁")]),s._v(" "),n("code",[s._v("ACC_SYNCHRONIZED")]),s._v(" "),n("code",[s._v("monitor")]),s._v(" "),n("code",[s._v("MarkWord")]),s._v(" "),n("code",[s._v("自旋")]),s._v(" "),n("code",[s._v("CAS")])]),s._v(" "),n("p",[s._v("对于同步方法，"),n("code",[s._v("JVM")]),s._v("采用"),n("code",[s._v("ACC_SYNCHRONIZED")]),s._v("标记符来实现同步。\n对于同步代码块,JVM采用"),n("code",[s._v("monitor enter")]),s._v("、"),n("code",[s._v("monitor exit")]),s._v("两个指令来实现同步。")]),s._v(" "),n("p",[s._v("关于这部分内容，在JVM规范"),n("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-3.html#jvms-3.14",target:"_blank",rel:"noopener noreferrer"}},[s._v("Synchronization"),n("OutboundLink")],1),s._v("中也可以找到相关的描述。")]),s._v(" "),n("p",[s._v("Java 6 "),n("code",[s._v("synchronized")]),s._v(" 的实现方法主要是指重量级锁的实现，即"),n("strong",[s._v("监视器锁")]),s._v("（"),n("code",[s._v("monitor")]),s._v("）是依赖于底层的操作系统的"),n("code",[s._v("Mutex Lock")]),s._v("来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，效率低下。")]),s._v(" "),n("p",[s._v("所以Java 6 之后，为了减少获得锁和释放锁所带来的性能消耗，引入了"),n("strong",[s._v("偏向锁")]),s._v("，和"),n("strong",[s._v("轻量级锁")]),s._v("等。")]),s._v(" "),n("p",[s._v("锁一共有四种状态，级别从低到高依次是："),n("strong",[s._v("无锁状态")]),s._v("、"),n("strong",[s._v("偏向锁状态")]),s._v("、"),n("strong",[s._v("轻量级锁状态")]),s._v("和"),n("strong",[s._v("重量级锁状态")]),s._v("，这几个状态随着竞争情况逐渐升级。"),n("strong",[s._v("为了提高获得锁和释放锁的效率，锁可以升级但不能降级")]),s._v("，意味着偏向锁升级为轻量级锁后不能降级为偏向锁。")]),s._v(" "),n("p",[s._v("其中"),n("code",[s._v("偏向锁")]),s._v("、"),n("code",[s._v("轻量级锁")]),s._v("不在这里详细阐述，这里重点介绍下它们在获取锁的时使用到的"),n("strong",[s._v("自旋锁")])]),s._v(" "),n("p",[s._v("自旋锁是指当一个线程尝试获取某个锁时，如果该锁已被其他线程占用，就一直循环检测锁是否被释放，而不是进入线程挂起或睡眠状态。")]),s._v(" "),n("p",[s._v("线程的阻塞和唤醒需要CPU从用户态转为核心态，频繁的阻塞和唤醒显然对CPU来说苦不吭言。其实很多时候，锁状态只持续很短一段时间，为了这段短暂的光阴，频繁去阻塞和唤醒线程肯定不值得。因此"),n("strong",[s._v("自旋锁")]),s._v("应运而生。")]),s._v(" "),n("p",[s._v("自旋锁适用于锁保护的临界区很小的情况，临界区很小的话，锁占用的时间就很短。")]),s._v(" "),n("p",[s._v("为什么"),n("code",[s._v("ConcurrentHashMap")]),s._v("放弃分段锁(JDK 7)，而使用"),n("strong",[s._v("CAS自旋方式")]),s._v("(JDK 8)，其实也是这个道理。")])])}),[],!1,null,null,null);n.default=e.exports}}]);