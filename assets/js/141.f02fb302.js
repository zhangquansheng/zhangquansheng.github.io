(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{409:function(_,v,t){"use strict";t.r(v);var e=t(10),s=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[_._v("#")]),_._v(" 索引")]),_._v(" "),v("blockquote",[v("p",[_._v("本文是基于 InnoDB 存储引擎。")])]),_._v(" "),v("p",[_._v("索引("),v("code",[_._v("B+树索引")]),_._v(")的本质就是"),v("a",{attrs:{href:"/algorithms/balanced-tree"}},[_._v("B+树")]),_._v("在数据库中的实现。")]),_._v(" "),v("p",[_._v("B+树索引可以分为"),v("strong",[_._v("聚集索引("),v("code",[_._v("clustered index")]),_._v(")"),v("strong",[_._v("和")]),_._v("非聚集索引("),v("code",[_._v("secondary index")]),_._v(")")]),_._v("，但是不管是聚集索引还是非聚集索引，其内部都是B+树的，即高度平衡的，叶子节点存放着所有的数据。\n"),v("strong",[_._v("聚集索引和非聚集索引的区别是：叶子节点存放的是否是一整行的信息。")])]),_._v(" "),v("h2",{attrs:{id:"聚集索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引"}},[_._v("#")]),_._v(" 聚集索引")]),_._v(" "),v("blockquote",[v("p",[_._v("也叫"),v("code",[_._v("主键索引")])])]),_._v(" "),v("p",[_._v("聚集索引就是按照每张表的"),v("strong",[_._v("主键")]),_._v("构造一颗"),v("code",[_._v("B+树")]),_._v("，同时叶子节点存放的即为整张表的"),v("strong",[_._v("行记录数据")]),_._v("，也将聚集索引的叶子节点称为"),v("strong",[_._v("数据页")]),_._v("。一个表不可能有两个地方存放数据，所以一个表只能有一个聚集索引。\n"),v("code",[_._v("InnoDB")]),_._v("表中聚集索引的索引列就是主键，所以聚集索引也叫"),v("code",[_._v("主键索引")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"非聚集索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非聚集索引"}},[_._v("#")]),_._v(" 非聚集索引")]),_._v(" "),v("blockquote",[v("p",[_._v("也叫"),v("code",[_._v("辅助索引")]),_._v("或"),v("code",[_._v("二级索引")]),_._v("或"),v("code",[_._v("普通索引")])])]),_._v(" "),v("p",[_._v("辅助索引叶子节点的数据不是存储实际的数据，而是主键的值(或者叫做"),v("strong",[_._v("聚集索引键")]),_._v("、"),v("strong",[_._v("bookmark")]),_._v(")。要想拿到实际的数据需要再通过主键索引找到对应的行记录然后才能拿到实际的数据，这个过程称为"),v("strong",[_._v("回表")]),_._v("。")]),_._v(" "),v("p",[_._v("如果查询语句可以从非聚集索引（包括"),v("code",[_._v("联合索引")]),_._v("）中获取到所有需要的列，这时不需要再通过主键索引找到对应的行记录，这种情况称为"),v("strong",[_._v("覆盖索引")]),_._v("（索引覆盖）。")]),_._v(" "),v("h2",{attrs:{id:"cardinality-值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cardinality-值"}},[_._v("#")]),_._v(" Cardinality 值")]),_._v(" "),v("blockquote",[v("p",[_._v("基数值越大越好，越趋近总记录数越好。")])]),_._v(" "),v("p",[_._v("不是所有的查询条件出现的列都需要添加索引。对于什么时候添加B+树索引。一般的经验是，在访问表中很少一部分时使用B+树索引才有意义。对于性别字段、地区字段、类型字段，它们可取值范围很小，称为"),v("strong",[_._v("低选择性")]),_._v("。")]),_._v(" "),v("p",[_._v("怎样查看索引是否有"),v("strong",[_._v("高选择性")]),_._v("？可以通过以下"),v("code",[_._v("SQL")]),_._v("查询结果中的列"),v("code",[_._v("Cardinality")]),_._v("来观察。")]),_._v(" "),v("div",{staticClass:"language-sql line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-sql"}},[v("code",[_._v("mysql"),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(">")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("SHOW")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("INDEX")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("FROM")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token identifier"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("`")]),_._v("TABLE_NAME"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("`")])]),_._v("\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br")])]),v("p",[v("img",{attrs:{src:"/img/mysql/SHOW-INDEX-FROM-TABLE.png",alt:"SHOW-INDEX-FROM-TABLE"}})]),_._v(" "),v("p",[v("code",[_._v("Cardinality")]),_._v("值非常关键，表示"),v("strong",[_._v("索引中不重复记录数量的预估值")]),_._v("。同时需要注意的是，"),v("code",[_._v("Cardinality")]),_._v("一个预估值，而不是一个准确值，基本上用户也不可能得到一个准确的值。")]),_._v(" "),v("h2",{attrs:{id:"b-树索引的使用-联合索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#b-树索引的使用-联合索引"}},[_._v("#")]),_._v(" B+树索引的使用：联合索引")]),_._v(" "),v("p",[_._v("联合索引是指对"),v("strong",[_._v("表上的多个列进行索引")]),_._v("。联合索引也是"),v("code",[_._v("B+树索引")]),_._v("，不同的是联合索引的键值的数量不是"),v("code",[_._v("1")]),_._v("，而是大于等于"),v("code",[_._v("2")]),_._v("。")]),_._v(" "),v("p",[_._v("联合索引中"),v("strong",[_._v("列的顺序很重要")]),_._v("。"),v("code",[_._v("InnoDB")]),_._v("首先根据联合索引中最左边的、也就是第一列进行排序，在第一列排序的基础上，再对联合索引中后面的第二列进行排序，依此类推。")]),_._v(" "),v("p",[_._v("所以如果想使用联合索引的第"),v("code",[_._v("n")]),_._v("列，查询条件中必须包括联合索引前面的第1列到第n-1列的查询信息。如"),v("code",[_._v("(group, score)")]),_._v("，可能出现以下排序"),v("code",[_._v("(1, 46)")]),_._v(", "),v("code",[_._v("(1,58)")]),_._v(", "),v("code",[_._v("(2,23)")]),_._v(", "),v("code",[_._v("(2,96)")]),_._v(", "),v("code",[_._v("(3,25)")]),_._v(", "),v("code",[_._v("(3,67)")]),_._v("。")]),_._v(" "),v("p",[_._v("如果要使用该索引的"),v("code",[_._v("score")]),_._v("，查询条件中必须包含"),v("code",[_._v("group")]),_._v("，如"),v("code",[_._v("where group = 2 and score = 96")]),_._v("，"),v("code",[_._v("InnoDB")]),_._v("通过"),v("code",[_._v("group")]),_._v("查询后，再通过"),v("code",[_._v("score")]),_._v("查询，这个规则称为"),v("strong",[_._v("最左前缀匹配原则（最左匹配原则）")]),_._v("。")]),_._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[_._v("为什么最左匹配？")]),_._v(" "),v("ol",[v("li",[_._v("因为mysql创建联合索引时，首先会对"),v("strong",[_._v("最左边字段排序")]),_._v("，也就是第一个字段，然后再在保证第一个字段有序的情况下，再排序第二个字段，以此类推。")]),_._v(" "),v("li",[_._v("举例：可以把联合索引看成“电话簿”，姓名作为联合索引，姓是第一列，名是第二列，当查找人名时，是先确定这个人姓再根据名确定人。只有名没有姓就查不到。")])])]),_._v(" "),v("h2",{attrs:{id:"b-树索引的使用-覆盖索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#b-树索引的使用-覆盖索引"}},[_._v("#")]),_._v(" B+树索引的使用：覆盖索引")]),_._v(" "),v("p",[_._v("如果一个索引包含(或覆盖)所有需要查询的字段的值，称为"),v("strong",[_._v("覆盖索引")]),_._v("。即只需扫描索引而无须"),v("strong",[_._v("回表")]),_._v("。")]),_._v(" "),v("p",[v("strong",[_._v("应用场景：全模糊查询使用索引（索引扫描不回表）")])]),_._v(" "),v("p",[v("img",{attrs:{src:"/img/mysql/idx_name_like_out.png",alt:"idx_name_like_out"}}),_._v("\n从执行计划看到 "),v("code",[_._v("type=ALL，Extra=Using where")]),_._v(" 走的是全表扫描，索引失效。")]),_._v(" "),v("p",[_._v("利用覆盖索引的特性，改下后的"),v("code",[_._v("SQL")]),_._v("如下;\n"),v("img",{attrs:{src:"/img/mysql/idx_name_like_in.jpg",alt:"idx_name_like_in"}}),_._v("\n从执行计划看，走了索引"),v("code",[_._v("idx_name")]),_._v("，不需要回表访问数据，可以利用"),v("code",[_._v("Using where; Using index")]),_._v("这种"),v("strong",[_._v("索引扫描不回表的方式减少资源开销来提升性能")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"延伸阅读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#延伸阅读"}},[_._v("#")]),_._v(" 延伸阅读")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://tech.meituan.com/2014/06/30/mysql-index.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL索引原理及慢查询优化"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=s.exports}}]);