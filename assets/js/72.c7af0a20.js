(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{344:function(t,a,_){"use strict";_.r(a);var v=_(10),e=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"分布式事务概述-tcc-分布式事务实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务概述-tcc-分布式事务实战"}},[t._v("#")]),t._v(" 分布式事务概述 & TCC 分布式事务实战 🔨")]),t._v(" "),a("p",[t._v("分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。")]),t._v(" "),a("p",[t._v("本质上来说，分布式事务就是为了保证不同数据库的数据一致性。")]),t._v(" "),a("h2",{attrs:{id:"理论知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理论知识"}},[t._v("#")]),t._v(" 理论知识")]),t._v(" "),a("h3",{attrs:{id:"cap-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap-原则"}},[t._v("#")]),t._v(" CAP 原则")]),t._v(" "),a("p",[t._v("CAP原则指的是在一个分布式系统中，一致性(Consistency)、可用性(Availability)、分区容错性(Partition tolerance)，这三个属性最多只能同时实现两点，不可能三者兼顾。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/digging-deeper/cap.webp",alt:"cap"}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("一致性(Consistency)：所有的数据备份在同一时刻具有同样的值；")])]),t._v(" "),a("li",[a("p",[t._v("可用性(Availability)：保证无论请求成功或失败，系统都会给出响应；")])]),t._v(" "),a("li",[a("p",[t._v("分区容错性(Partition tolerance)：指的是系统任意信息的丢失都不会影响系统的继续运行，或任意节点的丢失，都不影响其他节点的继续运行。")])]),t._v(" "),a("li",[a("p",[t._v("AP")]),t._v(" "),a("ul",[a("li",[t._v("Nacos")]),t._v(" "),a("li",[t._v("Eureka : Eureka保证每个服务节点的独立性，保证某个服务节点的连接失败或者某个接点挂掉其他节点不受影响。但是Eureka的缺陷就是无法保证数据的一致性，也就是说，某个节点获取的注册服务列表，可能不是最新的数据。")])])]),t._v(" "),a("li",[a("p",[t._v("CP")]),t._v(" "),a("ul",[a("li",[t._v("Zookeeper : CP设计，保证了一致性，集群搭建的时候，某个节点失效，则会进行选举行的leader，或者半数以上节点不可用，则无法提供服务，因此可用性没法满足")]),t._v(" "),a("li",[t._v("Consul")])])])]),t._v(" "),a("h3",{attrs:{id:"base"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base"}},[t._v("#")]),t._v(" BASE")]),t._v(" "),a("p",[t._v("理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到"),a("strong",[t._v("最终一致性")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Basically Available（基本可用）")]),t._v("：允许损失部分可用性，保证核心可用")]),t._v(" "),a("li",[a("strong",[t._v("Soft-state（ 软状态/柔性事务）")]),t._v("：允许系统在不同节点间副本同步的时候存在延时")]),t._v(" "),a("li",[a("strong",[t._v("Eventual Consistency（最终一致性）")]),t._v("：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态，不需要实时保证系统数据的强一致性。")])]),t._v(" "),a("h2",{attrs:{id:"xa-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xa-协议"}},[t._v("#")]),t._v(" XA 协议")]),t._v(" "),a("p",[a("code",[t._v("XA")]),t._v("协议是由"),a("code",[t._v("X/Open")]),t._v("组织提出的分布式事务处理规范，主要定义了事务管理器"),a("code",[t._v("TM")]),t._v("和局部资源管理器"),a("code",[t._v("RM")]),t._v("之间的接口。目前主流的数据库，比如"),a("code",[t._v("oracle")]),t._v("、"),a("code",[t._v("DB2")]),t._v(" 都是支持"),a("code",[t._v("XA")]),t._v("协议的。")]),t._v(" "),a("h2",{attrs:{id:"_2pc-两段提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2pc-两段提交"}},[t._v("#")]),t._v(" 2PC(两段提交)")]),t._v(" "),a("ul",[a("li",[t._v("一阶段 prepare 行为")]),t._v(" "),a("li",[t._v("二阶段 commit 或 rollback 行为")])]),t._v(" "),a("h2",{attrs:{id:"_3pc-三段提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3pc-三段提交"}},[t._v("#")]),t._v(" 3PC(三段提交)")]),t._v(" "),a("p",[t._v("与两阶段提交不同的是，三阶段提交有两个改动点。")]),t._v(" "),a("ul",[a("li",[t._v("1、 引入超时机制。同时在协调者和参与者中都引入超时机制。")]),t._v(" "),a("li",[t._v("2、 在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。")])]),t._v(" "),a("p",[t._v("无论是二阶段提交还是三阶段提交都无法彻底解决分布式的一致性问题。"),a("code",[t._v("Google Chubby")]),t._v("的作者"),a("code",[t._v("Mike Burrows")]),t._v("说过，\n"),a("code",[t._v("there is only one consensus protocol, and that’s Paxos” – all other approaches are just broken versions of Paxos")]),t._v(".\n意即世上只有一种一致性算法，那就是"),a("code",[t._v("Paxos")]),t._v("算法。")]),t._v(" "),a("h2",{attrs:{id:"tcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcc"}},[t._v("#")]),t._v(" TCC")]),t._v(" "),a("p",[t._v("全局事务是由若干分支事务组成的，分支事务要满足"),a("strong",[t._v("两阶段提交")]),t._v("的模型要求，即需要每个分支事务都具备自己的：")]),t._v(" "),a("ul",[a("li",[t._v("一阶段 prepare 行为")]),t._v(" "),a("li",[t._v("二阶段 commit 或 rollback 行为")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/digging-deeper/seata-tcc.png",alt:"seata-tcc"}})]),t._v(" "),a("p",[t._v("TCC 模式，不依赖于底层数据资源的事务支持：")]),t._v(" "),a("ul",[a("li",[t._v("一阶段 prepare 行为：调用自定义的 prepare 逻辑。")]),t._v(" "),a("li",[t._v("二阶段 commit 行为：调用自定义的 commit 逻辑。")]),t._v(" "),a("li",[t._v("二阶段 rollback 行为：调用自定义的 rollback 逻辑。")])]),t._v(" "),a("p",[t._v("所谓 TCC 模式，是指支持把自定义的分支事务纳入到全局事务的管理中。")]),t._v(" "),a("p",[a("strong",[t._v("参考文档")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/seata/seata",target:"_blank",rel:"noopener noreferrer"}},[t._v("seata"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/changmingxie/tcc-transaction",target:"_blank",rel:"noopener noreferrer"}},[t._v("tcc-transaction是TCC型事务java实现"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/dromara/hmily",target:"_blank",rel:"noopener noreferrer"}},[t._v("hmily"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);