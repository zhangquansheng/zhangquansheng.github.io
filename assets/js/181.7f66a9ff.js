(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{446:function(t,s,a){"use strict";a.r(s);var r=a(10),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"核心概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),s("h2",{attrs:{id:"sql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql"}},[t._v("#")]),t._v(" SQL")]),t._v(" "),s("h3",{attrs:{id:"逻辑表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑表"}},[t._v("#")]),t._v(" 逻辑表")]),t._v(" "),s("p",[t._v("水平拆分的数据库（表）的相同逻辑和数据结构表的总称。例：订单数据根据主键尾数拆分为"),s("code",[t._v("10")]),t._v("张表，分别是"),s("code",[t._v("t_order_0")]),t._v("到"),s("code",[t._v("t_order_9")]),t._v("，他们的逻辑表名为"),s("code",[t._v("t_order")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"真实表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#真实表"}},[t._v("#")]),t._v(" 真实表")]),t._v(" "),s("p",[t._v("在分片的数据库中真实存在的物理表。即上个示例中的"),s("code",[t._v("t_order_0")]),t._v("到"),s("code",[t._v("t_order_9")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"数据节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据节点"}},[t._v("#")]),t._v(" 数据节点")]),t._v(" "),s("p",[t._v("数据分片的最小单元。由数据源名称和数据表组成，例："),s("code",[t._v("ds_0.t_order_0")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"绑定表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绑定表"}},[t._v("#")]),t._v(" 绑定表")]),t._v(" "),s("p",[t._v("指分片规则一致的主表和子表。例如"),s("code",[t._v("t_order")]),t._v("表和"),s("code",[t._v("t_order_item")]),t._v("表，均按照"),s("code",[t._v("order_id")]),t._v("分片，则此两张表互为绑定表关系。绑定表之间的多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。举例说明，如果 "),s("code",[t._v("SQL")]),t._v(" 为：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t_order o "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" t_order_item i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在不配置绑定表关系时，假设分片键 "),s("code",[t._v("order_id")]),t._v(" 将数值 "),s("code",[t._v("10")]),t._v(" 路由至第 "),s("code",[t._v("0")]),t._v(" 片，将数值 "),s("code",[t._v("11")]),t._v(" 路由至第 "),s("code",[t._v("1")]),t._v(" 片，那么路由后的 "),s("code",[t._v("SQL")]),t._v(" 应该为 "),s("code",[t._v("4")]),t._v(" 条，它们呈现为笛卡尔积：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t_order_0 o "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" t_order_item_0 i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t_order_0 o "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" t_order_item_1 i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t_order_1 o "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" t_order_item_0 i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t_order_1 o "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" t_order_item_1 i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("在配置绑定表关系后，路由的 SQL 应该为 2 条：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t_order_0 o "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" t_order_item_0 i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t_order_1 o "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" t_order_item_1 i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("其中 t_order 在 FROM 的最左侧，"),s("code",[t._v("ShardingSphere")]),t._v(" 将会以它作为整个绑定表的主表。 所有路由计算将会只使用主表的策略，那么 "),s("code",[t._v("t_order_item")]),t._v(" 表的分片计算将会使用 "),s("code",[t._v("t_order")]),t._v(" 的条件。故绑定表之间的分区键要完全相同。")]),t._v(" "),s("h3",{attrs:{id:"广播表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广播表"}},[t._v("#")]),t._v(" 广播表")]),t._v(" "),s("p",[t._v("指所有的分片数据源中都存在的表，表结构和表中的数据在每个数据库中均完全一致。适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表。")]),t._v(" "),s("h2",{attrs:{id:"分片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分片"}},[t._v("#")]),t._v(" 分片")]),t._v(" "),s("h3",{attrs:{id:"分片键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分片键"}},[t._v("#")]),t._v(" 分片键")]),t._v(" "),s("p",[t._v("用于分片的数据库字段，是将数据库（表）水平拆分的关键字段。例：将订单表中的订单主键的尾数取模分片，则订单主键为分片字段。 SQL 中如果无分片字段，将执行全路由，性能较差。 除了对单分片字段的支持，Apache ShardingSphere 也支持根据多个字段进行分片。")]),t._v(" "),s("h3",{attrs:{id:"分片算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分片算法"}},[t._v("#")]),t._v(" 分片算法")]),t._v(" "),s("p",[t._v("通过分片算法将数据分片，支持通过 "),s("code",[t._v("=")]),t._v("、"),s("code",[t._v(">=")]),t._v("、"),s("code",[t._v("<=")]),t._v("、"),s("code",[t._v(">")]),t._v("、"),s("code",[t._v("<")]),t._v("、"),s("code",[t._v("BETWEEN")]),t._v(" 和 "),s("code",[t._v("IN")]),t._v(" 分片。 分片算法需要"),s("strong",[t._v("应用方开发者自行实现")]),t._v("，可实现的灵活度非常高。")]),t._v(" "),s("p",[t._v("目前提供"),s("code",[t._v("4")]),t._v("种分片算法。 "),s("strong",[t._v("由于分片算法和业务实现紧密相关，因此并未提供内置分片算法，而是通过分片策略将各种场景提炼出来，提供更高层级的抽象，并提供接口让应用开发者自行实现分片算法。")])]),t._v(" "),s("ul",[s("li",[t._v("标准分片算法")])]),t._v(" "),s("blockquote",[s("p",[t._v("对应 "),s("code",[t._v("StandardShardingAlgorithm")]),t._v("，用于处理使用单一键作为分片键的 =、IN、BETWEEN AND、>、<、>=、<=进行分片的场景。需要配合 "),s("code",[t._v("StandardShardingStrategy")]),t._v(" 使用。")])]),t._v(" "),s("ul",[s("li",[t._v("复合分片算法")])]),t._v(" "),s("blockquote",[s("p",[t._v("对应 "),s("code",[t._v("ComplexKeysShardingAlgorithm")]),t._v("，用于处理使用多键作为分片键进行分片的场景，包含多个分片键的逻辑较复杂，需要应用开发者自行处理其中的复杂度。需要配合 "),s("code",[t._v("ComplexShardingStrategy")]),t._v(" 使用。")])]),t._v(" "),s("ul",[s("li",[t._v("Hint分片算法")])]),t._v(" "),s("blockquote",[s("p",[t._v("对应 "),s("code",[t._v("HintShardingAlgorithm")]),t._v("，用于处理使用 Hint 行分片的场景。需要配合 "),s("code",[t._v("HintShardingStrategy")]),t._v(" 使用。")])]),t._v(" "),s("h3",{attrs:{id:"分片策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分片策略"}},[t._v("#")]),t._v(" 分片策略")]),t._v(" "),s("p",[t._v("包含分片键和分片算法，由于分片算法的独立性，将其独立抽离。真正可用于分片操作的是分片键 + 分片算法，也就是分片策略。目前提供 5 种分片策略。")]),t._v(" "),s("ul",[s("li",[t._v("标准分片策略")])]),t._v(" "),s("blockquote",[s("p",[t._v("对应 "),s("code",[t._v("StandardShardingStrategy")]),t._v("。提供对"),s("code",[t._v("SQL")]),t._v("语句中的 "),s("code",[t._v("=")]),t._v(", "),s("code",[t._v(">")]),t._v(", "),s("code",[t._v("<")]),t._v(", "),s("code",[t._v(">=")]),t._v(", "),s("code",[t._v("<=")]),t._v(", "),s("code",[t._v("IN")]),t._v(" 和 "),s("code",[t._v("BETWEEN AND")]),t._v(" 的分片操作支持。 "),s("code",[t._v("StandardShardingStrategy")]),t._v(" 只支持单分片键，提供 "),s("code",[t._v("PreciseShardingAlgorithm")]),t._v(" 和 "),s("code",[t._v("RangeShardingAlgorithm")]),t._v(" 两个分片算法。 "),s("code",[t._v("PreciseShardingAlgorithm")]),t._v(" 是必选的，用于处理 = 和 IN 的分片。\n"),s("code",[t._v("RangeShardingAlgorithm")]),t._v(" 是可选的，用于处理 "),s("code",[t._v("BETWEEN AND")]),t._v(", "),s("code",[t._v(">")]),t._v(", "),s("code",[t._v("<")]),t._v(", "),s("code",[t._v(">=")]),t._v(", "),s("code",[t._v("<=")]),t._v("分片，如果不配置 "),s("code",[t._v("RangeShardingAlgorithm")]),t._v("，"),s("code",[t._v("SQL")]),t._v(" 中的 "),s("code",[t._v("BETWEEN AND")]),t._v(" 将按照全库路由处理。")])]),t._v(" "),s("ul",[s("li",[t._v("复合分片策略")])]),t._v(" "),s("blockquote",[s("p",[t._v("对应 "),s("code",[t._v("ComplexShardingStrategy")]),t._v("。复合分片策略。提供对 SQL 语句中的 "),s("code",[t._v("=")]),t._v(", "),s("code",[t._v(">")]),t._v(", "),s("code",[t._v("<")]),t._v(", "),s("code",[t._v(">=")]),t._v(", "),s("code",[t._v("<=")]),t._v(", "),s("code",[t._v("IN")]),t._v(" 和 "),s("code",[t._v("BETWEEN AND")]),t._v(" 的分片操作支持。 "),s("code",[t._v("ComplexShardingStrategy")]),t._v(" 支持多分片键，由于多分片键之间的关系复杂，因此并未进行过多的封装，而是直接将分片键值组合以及分片操作符透传至分片算法，完全由应用开发者实现，提供最大的灵活度。")])]),t._v(" "),s("ul",[s("li",[t._v("Hint分片策略")])]),t._v(" "),s("blockquote",[s("p",[t._v("对应 "),s("code",[t._v("HintShardingStrategy")]),t._v("。通过 "),s("code",[t._v("Hint")]),t._v(" 指定分片值而非从 SQL 中提取分片值的方式进行分片的策略。")])]),t._v(" "),s("ul",[s("li",[t._v("不分片策略")])]),t._v(" "),s("blockquote",[s("p",[t._v("对应 "),s("code",[t._v("NoneShardingStrategy")]),t._v("。不分片的策略。")])]),t._v(" "),s("h3",{attrs:{id:"sql-hint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql-hint"}},[t._v("#")]),t._v(" SQL Hint")]),t._v(" "),s("p",[t._v("对于分片字段非 "),s("code",[t._v("SQL")]),t._v(" 决定，而由其他外置条件决定的场景，可使用 "),s("code",[t._v("SQL Hint")]),t._v("灵活的注入分片字段。 例：内部系统，按照员工登录主键分库，而数据库中并无此字段。SQL Hint 支持通过 Java API 和 SQL 注释（待实现）两种方式使用。 详情请参见强制分片路由。")])])}),[],!1,null,null,null);s.default=e.exports}}]);