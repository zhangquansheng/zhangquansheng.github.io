(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{457:function(t,s,r){"use strict";r.r(s);var a=r(10),v=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"hystrix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hystrix"}},[t._v("#")]),t._v(" Hystrix 👍")]),t._v(" "),s("p",[t._v("在 SpringCloud 中断路器组件就是 Hystrix。功能是："),s("strong",[t._v("当对某个服务的调用在一定的时间内（默认10s），有超过一定次数（默认20次）并且失败率超过一定值（默认50%），该服务的断路器会打开。返回一个由开发者设定的fallback")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"隔离策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隔离策略"}},[t._v("#")]),t._v(" 隔离策略")]),t._v(" "),s("p",[t._v("线程池隔离（默认）、信号量隔离")]),t._v(" "),s("ul",[s("li",[t._v("THREAD（线程池隔离）：使用该方式，HystrixCommand将"),s("strong",[t._v("会在单独的线程上执行")]),t._v("，并发请求"),s("strong",[t._v("受线程池中线程数量的限制")]),t._v("。")]),t._v(" "),s("li",[t._v("SEMAPHORE（信号量隔离）：使用该方式，HystrixCommand将"),s("strong",[t._v("会在调用线程上执行")]),t._v("，开销相对较小，并发请求"),s("strong",[t._v("受信号量的个数的限制")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"熔断与降级的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#熔断与降级的区别"}},[t._v("#")]),t._v(" 熔断与降级的区别")]),t._v(" "),s("ol",[s("li",[t._v("服务降级：不管在什么情况下，"),s("strong",[t._v("服务降级的流程都是先调用正常的方法，再调用fallback的方法")]),t._v("。")]),t._v(" "),s("li",[t._v("服务熔断：假设服务宕机或者在单位时间内调用服务失败的次数过多，即服务降级的次数太多，那么则服务熔断。并且熔断以后"),s("strong",[t._v("会跳过正常的方法")]),t._v("，会直接调用fallback方法，即所谓“服务熔断后不可用”。 类似于家里常见的保险丝，当达到最大服务访问后，会直接拒绝访问，拉闸限电，然后调用服务降级的fallback方法。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);